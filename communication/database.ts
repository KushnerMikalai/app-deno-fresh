import { ResourceLoader } from "../helpers/loader.ts";
import * as postgres from "$postgres";
import * as supabase from "supabase";

export interface DatabaseUser {
  userId: number;
  userName: string;
  avatarUrl: string;
}

export class Database {
  #client: supabase.SupabaseClient;

  constructor(client?: supabase.SupabaseClient) {
    this.#client = client ?? supabase.createClient(
      Deno.env.get("SUPABASE_API_URL")!,
      Deno.env.get("SUPABASE_ANON_KEY")!,
    );
  }

  async getRooms() {
    const { data, error } = await this.#client.from("rooms_with_activity")
      .select(
        "id,name,last_message_at",
      );
    if (error) {
      throw new Error(error.message);
    }
    return data.map((d) => ({
      roomId: d.id,
      name: d.name,
      lastMessageAt: d.last_message_at,
    }));
  }
}

export const databaseLoader = new ResourceLoader<Database>({
  async load() {
    // automatically create the database schema on startup
    const client = new postgres.Client({
      hostname: getEnvOrThrow("SUPABASE_DB_HOSTNAME"),
      port: Deno.env.get("SUPABASE_DB_PORT") ?? 5432,
      user: Deno.env.get("SUPABASE_DB_USER") ?? "postgres",
      password: getEnvOrThrow("SUPABASE_DB_PASSWORD"),
      database: Deno.env.get("SUPABASE_DB_NAME") ?? "postgres",
    });
    await client.connect();
    await client.queryArray(`
        create table if not exists users (
          id integer generated by default as identity primary key,
          created_at timestamp with time zone default timezone('utc'::text, now()) not null,
          username text unique,
          avatar_url text,
          access_token text
        );
        create table if not exists rooms (
          id integer generated by default as identity primary key,
          created_at timestamp with time zone default timezone('utc'::text, now()) not null,
          name text unique not null
        );
        create table if not exists messages (
          id integer generated by default as identity primary key,
          created_at timestamp with time zone default timezone('utc'::text, now()) not null,
          message text,
          "from" integer references users (id),
          "room" integer references rooms (id)
        );
        create or replace view rooms_with_activity
        as select
          rooms.id as id,
          rooms.name as name,
          max(messages.created_at) as last_message_at
        from rooms
        left join messages on messages.room = rooms.id
        group by rooms.id
        order by last_message_at desc nulls last;
        insert into rooms (id, name) values (0, 'Lobby') on conflict(id) do nothing;
        `);
    await client.end();
    return Promise.resolve(new Database());

    function getEnvOrThrow(name: string) {
      const value = Deno.env.get(name);
      if (value == null) {
        throw new Error(`Missing env variable: ${name}`);
      }
      return value;
    }
  },
});
